Microsoft (R) Macro Assembler Version 6.11		    11/14/21 14:26:55
tempfile.asm						     Page 1 - 1


 0000				DATAS SEGMENT
 0000 0D 0A 50 6C 65 61		    INPUT1 DB 13,10,'Please input a string:','$'
       73 65 20 69 6E 70
       75 74 20 61 20 73
       74 72 69 6E 67 3A
       24
 0019 0D 0A 50 6C 65 61		    INPUT2 DB 13,10,'Please input a key:','$'
       73 65 20 69 6E 70
       75 74 20 61 20 6B
       65 79 3A 24
 002F 0D 0A 49 6E 70 75		    ERROR DB 13,10,'Input error!','$'
       74 20 65 72 72 6F
       72 21 24
				    
				    ; LABEL伪指令给变量设置别名，共享内存位置
 003E				    BUFFER LABEL BYTE
 003E 50			    	   MAX1 DB 80
 003F 00			    	   ACT1 DB ?
 0040  0050 [			    	   STOKN1 DB 80 DUP(?)
        00
       ]
				    	   
 0090				    KEY	LABEL BYTE
 0090 50			    	MAX2 DB 80
 0091 00			    	ACT2 DB ?
 0092  0050 [			    	STOKN2 DB 80 DUP(?)	 
        00
       ]
				    
 00E2				    TEMP LABEL BYTE
 00E2 50			    	MAX3 DB 80
 00E3 00			    	ACT3 DB ?
 00E4  0050 [			    	STOKN3 DB 80 DUP(?)
        00
       ]
				    	
 0134 0D 0A 2B 2B 2B 2B		    DIVIDING_LINE_1 DB 13,10,'++++++++++++++++++++++++++++++++++',13,10,'$'	;此处分割线
       2B 2B 2B 2B 2B 2B
       2B 2B 2B 2B 2B 2B
       2B 2B 2B 2B 2B 2B
       2B 2B 2B 2B 2B 2B
       2B 2B 2B 2B 2B 2B
       0D 0A 24
 015B 0D 0A 2D 2D 2D 2D		    DIVIDING_LINE_2 DB 13,10,'----------------------------------','$'	;此处分割线
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       24
				   	
 0180 0D 0A 57 68 65 74		    ASK_1 DB 13,10,'Whether to perform string matching?','$'
       68 65 72 20 74 6F
       20 70 65 72 66 6F
       72 6D 20 73 74 72
       69 6E 67 20 6D 61
       74 63 68 69 6E 67
       3F 24
 01A6 0D 0A 50 6C 65 61		    ASK_2 DB 13,10,'Please input Y/N:','$'
       73 65 20 69 6E 70
       75 74 20 59 2F 4E
       3A 24
				    
				    
 01BA 0D 0A 4D 61 74 63		    MATCH  DB 13,10,'Match Successfully!','$'
       68 20 53 75 63 63
       65 73 73 66 75 6C
       6C 79 21 24
 01D0 0D 0A 46 61 69 6C		    NOMATCH DB 13,10,'Failed.No Match','$'
       65 64 2E 4E 6F 20
       4D 61 74 63 68 24
 01E2 0D 0A 4B 65 79 77		    LOCATION_1 DB 13,10,'Keyword location (Hex) is:','$'
       6F 72 64 20 6C 6F
       63 61 74 69 6F 6E
       20 28 48 65 78 29
       20 69 73 3A 24
 01FF 0D 0A 4B 65 79 77		    LOCATION_2 DB 13,10,'Keyword location (Decimal) is:','$'
       6F 72 64 20 6C 6F
       63 61 74 69 6F 6E
       20 28 44 65 63 69
       6D 61 6C 29 20 69
       73 3A 24
 0220 0D 0A 54 68 65 20		    RESULT DB 13,10,'The content of the new string is:','$'
       63 6F 6E 74 65 6E
       74 20 6F 66 20 74
       68 65 20 6E 65 77
       20 73 74 72 69 6E
       67 20 69 73 3A 24
 0244 0D 0A 24			    CRLF DB 13,10,'$'
 0247 24			    CHAR DB '$'
 0248				DATAS ENDS

 0000				STACKS SEGMENT
				    ;此处输入堆栈段代码
 0000				STACKS ENDS

 0000				CODES SEGMENT
				    ASSUME CS:CODES,DS:DATAS,SS:STACKS,ES:DATAS
 0000				START:
 0000  B8 ---- R		    MOV AX,DATAS
 0003  8E D8			    MOV DS,AX
 0005  8E C0			    MOV ES,AX
				    
 0007  8D 16 0134 R		    LEA DX,DIVIDING_LINE_1		;回车换行
 000B  B4 09			   	MOV AH,09H
 000D  CD 21			   	INT 21H
				   	
 000F  8D 16 0180 R		    LEA DX,ASK_1
 0013  B4 09			   	MOV AH,09H
 0015  CD 21			   	INT 21H
				    
 0017  8D 16 01A6 R		    LEA DX,ASK_2
 001B  B4 09			   	MOV AH,09H
 001D  CD 21			   	INT 21H
				   	
 001F  B4 01			   	MOV AH,01H			;设置带回显的键盘输入
 0021  CD 21			   	INT 21H
				   	   	
 0023  3C 59			   	CMP AL,'Y'
 0025  74 0C			   	JE BEGIN_1
				   	
 0027  3C 4E			   	CMP AL,'N'
 0029  75 03 E9 013A		   	JE END_0
 002E  74 03 E9 009C		   	JNE ERROR_1
				   	
 0033				BEGIN_1:
 0033  8D 16 0000 R		   	LEA DX,INPUT1	;提示输入
 0037  B4 09			   	MOV AH,09H
 0039  CD 21			   	INT 21H
				   	
 003B  8D 16 003E R		   	LEA DX,BUFFER	;输入字符串
 003F  B4 0A			   	MOV AH,0AH
 0041  CD 21			   	INT 21H
				   	 
 0043  8D 16 0019 R		   	LEA DX,INPUT2	;提示输入
 0047  B4 09			   	MOV AH,09H
 0049  CD 21			   	INT 21H
				   	
 004B  8D 16 0090 R		   	LEA DX,KEY		;输入关键字
 004F  B4 0A			   	MOV AH,0AH
 0051  CD 21			   	INT 21H
				   	
 0053  8D 16 015B R		   	LEA DX,DIVIDING_LINE_2		;回车换行
 0057  B4 09			   	MOV AH,09H
 0059  CD 21			   	INT 21H
				   	
 005B  8A 0E 0091 R		   	MOV CL,ACT2		;CL存放关键字长度
				   	
 005F  8A 26 003F R		   	MOV AH,ACT1
 0063  2A E1			   	SUB AH,CL
 0065  72 68			   	JB ERROR_1		;字符串长度小于关键字长度，直接error
				   	
 0067  8A F4			   	MOV DH,AH		;字符串长度减关键字长度作为循环次数
 0069  80 C6 01			   	ADD DH,1
				   	
 006C  8D 3E 0040 R		   	LEA DI,STOKN1	;初始化DI,为字符串指针
 0070  8D 36 0092 R		   	LEA SI,STOKN2	;初始化SI,为关键字指针
 0074  BB 0000				MOV BX,0		;初始化字符串偏移量

 0077				CMP_SEG:
 0077  FC				CLD				;设置SI,DI移动方向为+1
 0078  F3/ A6			   	REPZ CMPSB		;比较字符串和关键字
 007A  74 1A			   	JZ MATCH_1		;匹配成功,跳转至MATCH_1
 007C  75 00			   	JNZ LOOP_1		;匹配失败，循环继续匹配
				   	
 007E				LOOP_1:
 007E  43				INC BX			;字符串偏移量
 007F  8D 3E 0040 R			LEA DI,STOKN1	;重置DI
 0083  8D 36 0092 R		   	LEA SI,STOKN2	;重置SI
 0087  8A 0E 0091 R		   	MOV CL,ACT2		;CL存放关键字长度
 008B  03 FB			   	ADD DI,BX		;确定新的字符串起始位置
 008D  FE CE				DEC DH 			;循环次数减一
 008F  80 FE 00			   	CMP DH,0		;判断循环是否终止
 0092  74 30			   	JE NO_MATCH		;若循环终止还未匹配，则跳转至NO_MATCH
 0094  75 E1				JNE CMP_SEG 	;否则继续匹配
				   	
 0096				MATCH_1:
 0096  8D 16 01BA R			LEA DX,MATCH	;匹配成功
 009A  B4 09				MOV AH,09H
 009C  CD 21				INT 21H
					
 009E  8D 16 01E2 R			LEA DX,LOCATION_1
 00A2  B4 09				MOV AH,09H
 00A4  CD 21				INT 21H
					
 00A6  8B C3				MOV AX,BX
 00A8  53				PUSH BX				;进栈保护数据
 00A9  40				INC AX				;使起始位置从一开始
 00AA  E8 0048				CALL PRINT_2		;将关键字所在位置以十六进制数形式打印
					
 00AD  8D 16 01FF R			LEA DX,LOCATION_2
 00B1  B4 09				MOV AH,09H
 00B3  CD 21				INT 21H
					
 00B5  5B				POP BX				;出栈恢复数据
 00B6  8B C3				MOV AX,BX
 00B8  53				PUSH BX
 00B9  40				INC AX
 00BA  E8 001D				CALL PRINT_1		;将关键字所在位置以十进制数形式打印
					
 00BD  5B				POP BX
 00BE  E8 0063				CALL DELETE_KEY
					
					
 00C1  E9 FF3C				JMP START
					
 00C4				NO_MATCH:
 00C4  8D 16 01D0 R			LEA DX,NOMATCH		;匹配失败
 00C8  B4 09				MOV AH,09H
 00CA  CD 21				INT 21H
					
					
 00CC  E9 FF31				JMP START
 00CF				ERROR_1:
 00CF  8D 16 002F R			LEA DX,ERROR		;输入错误
 00D3  B4 09				MOV AH,09H
 00D5  CD 21				INT 21H
					
					
 00D7  E9 FF26				JMP START

 00DA				PRINT_1:    	;两位十进制输出
 00DA  B4 00				MOV AH,0  	;对于超过9个数的字符，ASCII中并没有直接与之对应的字符，因此应分别输出两位数的各位和十位。
 00DC  B3 0A				MOV BL,10
 00DE  F6 F3				DIV BL    	;将AX中内容除以10，商放在AL,余数放在AH
 00E0  04 30				ADD AL,30H  ;将个位数+30H转化为数字字符
 00E2  8A FC				MOV BH,AH
 00E4  8A D0				MOV DL,AL
 00E6  B4 02				MOV AH,02H  ;打印个位数
 00E8  CD 21				INT 21H
 00EA  8A C7				MOV AL,BH 
 00EC  04 30				ADD AL,30H  ;将十位数转化为数字字符
 00EE  8A D0				MOV DL,AL 
 00F0  B4 02				MOV AH,02H  ;打印十位数
 00F2  CD 21				INT 21H
 00F4  C3				RET

 00F5				PRINT_2:
 00F5  B4 00				MOV AH,0  ;对于超过9个数的字符，ASCII中并没有直接与之对应的字符，因此应分别输出两位数的各位和十位。
 00F7  B3 10				MOV BL,16
 00F9  F6 F3				DIV BL    ;将AX中内容除以16，商放在AL,余数放在AH
 00FB  8A FC				MOV BH,AH
 00FD  3C 0A				CMP AL,10
 00FF  72 02				JB NUMBER_1
 0101  73 04				JAE LETTER_1
 0103				  NUMBER_1:
 0103  04 30				ADD AL,30H  ;将个位数+30H转化为数字字符
 0105  EB 02				JMP OUTPUT_1
 0107				  LETTER_1:
 0107  04 37			  	ADD AL,37H	;将个位数+37H转化为字母字符
 0109				  OUTPUT_1:
 0109  8A D0				MOV DL,AL
 010B  B4 02				MOV AH,02H  ;打印个位数
 010D  CD 21				INT 21H
					
 010F  8A C7				MOV AL,BH 
 0111  3C 0A				CMP AL,10
 0113  72 02				JB NUMBER_2
 0115  73 04				JAE LETTER_2
 0117				  NUMBER_2:
 0117  04 30				ADD AL,30H  ;将个位数+37H转化为字母字符
 0119  EB 02				JMP OUTPUT_2
 011B				  LETTER_2:
 011B  04 37			  	ADD AL,37H
 011D				  OUTPUT_2:
 011D  8A D0				MOV DL,AL 
 011F  B4 02				MOV AH,02H  ;打印十位数
 0121  CD 21				INT 21H
 0123  C3				RET
					
					
 0124				DELETE_KEY:			;删除字符串中关键字
 0124  8D 36 0040 R			LEA SI,STOKN1	;复制原字符串到STOKN3
 0128  8D 3E 00E4 R			LEA DI,STOKN3
 012C  8A 0E 003F R			MOV CL,ACT1
 0130  B5 00				MOV CH,0
 0132  FC				CLD
 0133  F3/ A4				REP MOVSB
					
 0135  8D 3E 00E4 R			LEA DI,STOKN3	;删除字符串中关键字
 0139  03 FB				ADD DI,BX		;确定删除位置
					
 013B  8D 36 0040 R			LEA SI,STOKN1	;确定删除位置字符
 013F  03 F3				ADD SI,BX
 0141  8A 16 0091 R			MOV DL,ACT2
 0145  B6 00				MOV DH,0
 0147  03 F2				ADD SI,DX
					
 0149  8A 0E 003F R			MOV CL,ACT1
 014D  2A CA				SUB CL,DL
 014F  2B CB				SUB CX,BX
					
 0151  FC				CLD
 0152  F3/ A4				REP MOVSB
					
 0154  C6 05 24				MOV BYTE PTR[DI],'$'	;在删除之后字符串尾加'$',表示字符串终止
					
 0157  8D 16 0220 R			LEA DX,RESULT			;回车换行
 015B  B4 09				MOV AH,09H
 015D  CD 21				INT 21H
					
 015F  8D 16 00E4 R			LEA DX,STOKN3			;输出删除关键字后字符串
 0163  B4 09				MOV AH,09H
 0165  CD 21				INT 21H
					
 0167  C3				RET
 0168				END_0:
 0168  B4 4C				MOV AH,4CH
 016A  CD 21				INT 21H
 016C				CODES ENDS
				    END START
				    





Microsoft (R) Macro Assembler Version 6.11		    11/14/21 14:26:55
tempfile.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CODES  . . . . . . . . . . . . .	16 Bit	 016C	  Para	  Private 
DATAS  . . . . . . . . . . . . .	16 Bit	 0248	  Para	  Private 
STACKS . . . . . . . . . . . . .	16 Bit	 0000	  Para	  Private 


Symbols:

                N a m e                 Type     Value    Attr

ACT1 . . . . . . . . . . . . . .	Byte	 003F	  DATAS	
ACT2 . . . . . . . . . . . . . .	Byte	 0091	  DATAS	
ACT3 . . . . . . . . . . . . . .	Byte	 00E3	  DATAS	
ASK_1  . . . . . . . . . . . . .	Byte	 0180	  DATAS	
ASK_2  . . . . . . . . . . . . .	Byte	 01A6	  DATAS	
BEGIN_1  . . . . . . . . . . . .	L Near	 0033	  CODES	
BUFFER . . . . . . . . . . . . .	Byte	 003E	  DATAS	
CHAR . . . . . . . . . . . . . .	Byte	 0247	  DATAS	
CMP_SEG  . . . . . . . . . . . .	L Near	 0077	  CODES	
CRLF . . . . . . . . . . . . . .	Byte	 0244	  DATAS	
DELETE_KEY . . . . . . . . . . .	L Near	 0124	  CODES	
DIVIDING_LINE_1  . . . . . . . .	Byte	 0134	  DATAS	
DIVIDING_LINE_2  . . . . . . . .	Byte	 015B	  DATAS	
END_0  . . . . . . . . . . . . .	L Near	 0168	  CODES	
ERROR_1  . . . . . . . . . . . .	L Near	 00CF	  CODES	
ERROR  . . . . . . . . . . . . .	Byte	 002F	  DATAS	
INPUT1 . . . . . . . . . . . . .	Byte	 0000	  DATAS	
INPUT2 . . . . . . . . . . . . .	Byte	 0019	  DATAS	
KEY  . . . . . . . . . . . . . .	Byte	 0090	  DATAS	
LETTER_1 . . . . . . . . . . . .	L Near	 0107	  CODES	
LETTER_2 . . . . . . . . . . . .	L Near	 011B	  CODES	
LOCATION_1 . . . . . . . . . . .	Byte	 01E2	  DATAS	
LOCATION_2 . . . . . . . . . . .	Byte	 01FF	  DATAS	
LOOP_1 . . . . . . . . . . . . .	L Near	 007E	  CODES	
MATCH_1  . . . . . . . . . . . .	L Near	 0096	  CODES	
MATCH  . . . . . . . . . . . . .	Byte	 01BA	  DATAS	
MAX1 . . . . . . . . . . . . . .	Byte	 003E	  DATAS	
MAX2 . . . . . . . . . . . . . .	Byte	 0090	  DATAS	
MAX3 . . . . . . . . . . . . . .	Byte	 00E2	  DATAS	
NOMATCH  . . . . . . . . . . . .	Byte	 01D0	  DATAS	
NO_MATCH . . . . . . . . . . . .	L Near	 00C4	  CODES	
NUMBER_1 . . . . . . . . . . . .	L Near	 0103	  CODES	
NUMBER_2 . . . . . . . . . . . .	L Near	 0117	  CODES	
OUTPUT_1 . . . . . . . . . . . .	L Near	 0109	  CODES	
OUTPUT_2 . . . . . . . . . . . .	L Near	 011D	  CODES	
PRINT_1  . . . . . . . . . . . .	L Near	 00DA	  CODES	
PRINT_2  . . . . . . . . . . . .	L Near	 00F5	  CODES	
RESULT . . . . . . . . . . . . .	Byte	 0220	  DATAS	
START  . . . . . . . . . . . . .	L Near	 0000	  CODES	
STOKN1 . . . . . . . . . . . . .	Byte	 0040	  DATAS	
STOKN2 . . . . . . . . . . . . .	Byte	 0092	  DATAS	
STOKN3 . . . . . . . . . . . . .	Byte	 00E4	  DATAS	
TEMP . . . . . . . . . . . . . .	Byte	 00E2	  DATAS	

	   0 Warnings
	   0 Errors
